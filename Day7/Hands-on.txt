After installation of mongodb, start the service monod

in the bin directory there are many services, all of them have different purposes like..

start the monogd service in bin directory.

check in what port number it is running, for the clean exist use ctrl+C

now, check what are the other cmd options.
D:\Mongodb\bin>mongod --help |more
check the options like -dbpath, logfiles etc

now, go and start the shell, mongo
> 
to exit
>exit
bye

now, login again to the shell and check what are the databases.
>cls
or ctrl + L
>show dbs
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
>
> db
test
> use foo    
switched to db foo
> db
foo
>
> help
        db.help()                    help on db methods
        db.mycoll.help()             help on collection methods
        sh.help()                    sharding helpers
        rs.help()                    replica set helpers
        help admin                   administrative help
        help connect                 connecting to a db help
        help keys                    key shortcuts
        help misc                    misc things to know
        help mr                      mapreduce

        show dbs                     show database names
        show collections             show collections in current database
        show users                   show users in current database
        show profile                 show most recent system.profile entries with time >= 1ms
        show logs                    show the accessible logger names
        show log [name]              prints out the last segment of log in memory, 'global' is default
        use <db_name>                set current database
        db.foo.find()                list objects in collection foo
        db.foo.find( { a : 1 } )     list objects in foo where a == 1
        it                           result of the last line evaluated; use to further iterate
        DBQuery.shellBatchSize = x   set default number of items to display on shell
        exit                         quit the mongo shell
>

On the shell, you can run a javascript in the shell

> var myMessage = 'hello world';
> printjson(myMessage);
"hello world"
>

D:\Mongodb\bin>set EDITOR="c:\Program Files\Notepad\notepad.exe"


myjsfile.js
var myMessage = 'hello world';
printjson(myMessage);

> load('myjsfile.js')
"hello world"
true
>
> show collections
UserCountHistory
foo

> db.foo.save({_id:1,x:10})
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 1 })
> db.foo.find()
{ "_id" : ObjectId("5ad2fa7f264171a001af53f9"), "Name" : "bob", "Created" : "Sun Apr 15 2018 12:38:47 GMT+0530 (India Standard Time)", "Type" : "r" }
{ "_id" : 1, "x" : 10 }
> show collections
UserCountHistory
foo
> db.bar.save({_id:1,x:10})
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 1 })
> show collections
UserCountHistory
bar
foo

> db.foo.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "test.foo"
        }
]

what kind of id are valid

>db.foo.save({_id:1})
db.foo.save({_id:3.14})

db.foo.save({_id:"hello"})
db.foo.save({_id:ISODate()})
db.foo.save({_id:{a:'x',b:2} })

>
> db.user.insert({_id:"bob@bob.cob",Name:"Bob",Address:{Street:'123 Main',City:'Bang'},Music:['Blues','Alt']})
> db.user.find()
{ "_id" : "bob@bob.cob", "Name" : "Bob", "Address" : { "Street" : "123 Main", "City" : "Bang" }, "Music" : [ "Blues", "Alt" ] }
> db.user.insert({_id:"bob@bob.cob",Name:"Bob",Address:{Street:'123 Main',City:'Bang'},Music:['Blues','Alt']})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 11000,
                "errmsg" : "E11000 duplicate key error collection: test.user index: _id_ dup key: { : \"bob@bob.cob\" }"
        }
})
> db.user.find().pretty()
{
        "_id" : "bob@bob.cob",
        "Name" : "Bob",
        "Address" : {
                "Street" : "123 Main",
                "City" : "Bang"
        },
        "Music" : [
                "Blues",
                "Alt"
        ]
}
>

> db.user.insert({_id:"Mike@mike.mike",Name:"Mike",Address:{Cruise:'Fun',Ship:'SS Ahoy',Port: 'Marina'},Music:['Blues','Alt'],Loins:[{ip:123,t:ISODate("2018-01-01")}]})
WriteResult({ "nInserted" : 1 })
> db.user.find().pretty()
{
        "_id" : "bob@bob.cob",
        "Name" : "Bob",
        "Address" : {
                "Street" : "123 Main",
                "City" : "Bang"
        },
        "Music" : [
                "Blues",
                "Alt"
        ]
}
{
        "_id" : "meg@meg.meg",
        "Name" : "Bob",
        "Address" : {
                "Street" : "123 Main",
                "City" : "Bang"
        },
        "Music" : [
                "Blues",
                "Alt"
        ]
}
{
        "_id" : "Mike@mike.mike",
        "Name" : "Mike",
        "Address" : {
                "Cruise" : "Fun",
                "Ship" : "SS Ahoy",
                "Port" : "Marina"
        },
        "Music" : [
                "Blues",
                "Alt"
        ],
        "Loins" : [
                {
                        "ip" : 123,
                        "t" : ISODate("2018-01-01T00:00:00Z")
                }
        ]
}
>

> ObjectId("5ad30ab0264171a001af53fc").getTimestamp()
ISODate("2018-04-15T08:17:52Z")
>
> db.aaa.insert({x:1})
WriteResult({ "nInserted" : 1 })
> db.aaa.insert({x:1})
WriteResult({ "nInserted" : 1 })
> db.aaa.find()
{ "_id" : ObjectId("5ad30d51264171a001af53ff"), "x" : 1 }
{ "_id" : ObjectId("5ad30d52264171a001af5400"), "x" : 1 }
>

> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "three" ]
}
{ "_id" : 2, "things" : [ "one", "four", "five" ]
}

> db.a.find({"things":["one","two","three"]})
{ "_id" : 1, "things" : [ "one", "two", "three" ]
}
> db.a.find({"things":{$all:["one"]}})
{ "_id" : 1, "things" : [ "one", "two", "three" ]
}
{ "_id" : 2, "things" : [ "one", "four", "five" ]
}
> db.b.find({},{"things[0]":1})
> db.b.find({},{"things[0]":1,"things[2]":1})


> db.a.insert({"name":"john","address":{"city":"ba
ngalore","state":"karnataka"}})
> db.a.insert({"name":"Daniel","address":{"city":"
mumbai","state":"maharastra"}})
> db.a.insert({"name":"Smith","address":{"city":"c
hennai","state":"tamilnadu"}})
> db.a.insert({"name":"Smith","address":{"city":"c
hennai","state":"tamilnadu"}})


> db.a.find({"address.city":"pune"})
{ "_id" : ObjectId("5adf0cb3eaac955d422b695b"), "n
ame" : "Aaron", "address" : { "city" : "pune", "st
ate" : "maharastra" } }
> db.a.find({"address.state":"maharastra"})
{ "_id" : ObjectId("5adf0c79eaac955d422b6959"), "n
ame" : "Daniel", "address" : { "city" : "mumbai",
"state" : "maharastra" } }
{ "_id" : ObjectId("5adf0cb3eaac955d422b695b"), "n
ame" : "Aaron", "address" : { "city" : "pune", "st
ate" : "maharastra" } }
> db.a.find({},{"address.state":1})
{ "_id" : ObjectId("5adf0c5beaac955d422b6958"), "a
ddress" : { "state" : "karnataka" } }
{ "_id" : ObjectId("5adf0c79eaac955d422b6959"), "a
ddress" : { "state" : "maharastra" } }
{ "_id" : ObjectId("5adf0c97eaac955d422b695a"), "a
ddress" : { "state" : "tamilnadu" } }
{ "_id" : ObjectId("5adf0cb3eaac955d422b695b"), "a
ddress" : { "state" : "maharastra" } }
>




> db.a.insert({_id:1,x:10})
WriteResult({ "nInserted" : 1 })
> var doc = db.a.findOne({_id:1});
> doc.x = doc.x+1;
11
> db.a.save(doc);
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "x" : 11 }
> db.a.save({_id:1,x:10,y:3})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "x" : 10, "y" : 3 }
>

> db.a.update({_id:1},{$inc:{x:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "x" : 12 }
>
> db.a.find()
{ "_id" : 1, "x" : 12 }
> db.a.save({_id:1,x:10})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "x" : 10 }
> db.a.update({_id:1},{$set:{y:3}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.update({_id:1},{$inc:{x:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "x" : 11, "y" : 3 }
>
> db.a.update({_id:1},{$unset:{y:''}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "x" : 11 }
>
> db.a.update({_id:1},{$rename:{'Naem':'Name'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
> db.a.save({_id:1})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1 }
> db.a.update({_id:1},{$push:{things:'one'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one" ] }
>
to have an array, use $push

> db.a.update({_id:1},{$push:{things:'one'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one" ] }
> db.a.update({_id:1},{$push:{things:'two'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.update({_id:1},{$push:{things:'three'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "three" ] }
> db.a.update({_id:1},{$push:{things:'three'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "three", "three" ] }
>


$addToSet will not duplicate the array elements

> db.a.update({_id:1},{$addToSet:{things:'four'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "three", "three", "four" ] }
> db.a.update({_id:1},{$addToSet:{things:'four'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "three", "three", "four" ] }
>

$pull operator

> db.a.update({_id:1},{$pull:{things:'three'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "four" ] }
> db.a.update({_id:1},{$addToSet:{things:'three'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "four", "three" ] }
> db.a.update({_id:1},{$addToSet:{things:'three'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.a.update({_id:1},{$addToSet:{things:'three'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "four", "three" ] }
>

pops the last element with 1
> db.a.update({_id:1},{$pop:{things:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "one", "two", "four" ] }

pops the first element with -1
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "two", "four" ] }
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ "four" ] }
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ ] }
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.a.find()
{ "_id" : 1, "things" : [ ] }
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.a.find()
{ "_id" : 1, "things" : [ ] }
>


all these operators work on array, if ur document doesn't contain array then all of these will fail

> db.a.save({_id:1,things:"Hello"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.update({_id:1},{$pop:{things:1}})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 14,
                "errmsg" : "Path 'things' contains an element of non-array type 'string'"
        }
})
> db.a.update({_id:1},{$pop:{things:-1}})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 14,
                "errmsg" : "Path 'things' contains an element of non-array type 'string'"
        }
})
>
$pull/$pullAll can't be applied to non-array

> db.a.find()
{ "_id" : 1, "things" : [ 1, 2, 3 ] }
{ "_id" : 2, "things" : [ 2, 3 ] }
{ "_id" : 3, "things" : [ 3 ] }
{ "_id" : 4, "things" : [ 1, 3 ] }
> db.a.update({},{things:4}})
2018-04-15T15:21:47.804+0530 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):1:25
> db.a.update({},{$push:{things:4}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.a.find()
{ "_id" : 1, "things" : [ 1, 2, 3, 4 ] }
{ "_id" : 2, "things" : [ 2, 3 ] }
{ "_id" : 3, "things" : [ 3 ] }
{ "_id" : 4, "things" : [ 1, 3 ] }
> db.a.update({},{$push:{things:4}},{multi:true})
WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })
> db.a.find()
{ "_id" : 1, "things" : [ 1, 2, 3, 4, 4 ] }
{ "_id" : 2, "things" : [ 2, 3, 4 ] }
{ "_id" : 3, "things" : [ 3, 4 ] }
{ "_id" : 4, "things" : [ 1, 3, 4 ] }
>

> db.a.update({things:2},{$push:{things:42}},{multi:true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })
> db.a.find()
{ "_id" : 1, "things" : [ 1, 2, 3, 4, 4, 42 ] }
{ "_id" : 2, "things" : [ 2, 3, 4, 42 ] }
{ "_id" : 3, "things" : [ 3, 4 ] }
{ "_id" : 4, "things" : [ 1, 3, 4 ] }
>

Find and modify





